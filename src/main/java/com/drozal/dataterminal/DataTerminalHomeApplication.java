package com.drozal.dataterminal;

import com.drozal.dataterminal.config.ConfigReader;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DataTerminalHomeApplication extends Application {
    public static Boolean isLoggedIn;

    public static String getDate(){
        LocalDateTime currentTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        return currentTime.format(formatter);
    }

    public static String getTime(){
        LocalDateTime currentTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return currentTime.format(formatter);
    }
    private Spinner<Integer> createSpinner(Spinner spinner, int min, int max, int initialValue) {
        SpinnerValueFactory<Integer> valueFactory =
                new SpinnerValueFactory.IntegerSpinnerValueFactory(min, max, initialValue);
        spinner.setValueFactory(valueFactory);
        return spinner;
    }

    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage stage) throws IOException {


        Stage stage1 = new mainStage();
        FXMLLoader loader = new FXMLLoader(getClass().getResource("DataTerminalHome-view.fxml"));
        Parent root = loader.load();
        Scene newScene = new Scene(root);

        mainStage.mainRT.setScene(newScene);
        mainStage.mainRT.show();
        mainStage.mainRT.centerOnScreen();
        mainStage.mainRT.setY(mainStage.mainRT.getY() * 3f / 2f);


        actionController controller = loader.getController();
        StackPane defaultPane = controller.getDefaultPane();
        StackPane notesPane = controller.getNotesPane();
        StackPane codesPane = controller.getCodesPane();
        Label generatedByTag = controller.getGeneratedByTag();
        Label generatedOnTag = controller.getGeneratedDateTag();
        StackPane shiftInfoPane = controller.getShiftInformationPane();

        TextField OfficerInfoName = controller.getOfficerInfoName();
        TextField OfficerInfoDivision = controller.getOfficerInfoDivision();
        TextField OfficerInfoRank = controller.getOfficerInfoRank();
        TextField OfficerInfoNumber = controller.getOfficerInfoNumber();
        TextField OfficerInfoAgency = controller.getOfficerInfoAgency();

        Spinner<Integer> calloutSpinner = controller.getCalloutSpinner();
        Spinner<Integer> searchSpinner = controller.getSearchesSpinner();
        Spinner<Integer> arrestsSpinner = controller.getArrestsSpinner();
        Spinner<Integer> incidentSpinner = controller.getIncidentSpinner();
        Spinner<Integer> patrolsSpinner = controller.getPatrolsSpinner();
        Spinner<Integer> trafficStopsSpinner = controller.getTrafficStopSpinner();

        createSpinner(calloutSpinner,0,999,0);
        createSpinner(arrestsSpinner,0,999,0);
        createSpinner(searchSpinner,0,999,0);
        createSpinner(incidentSpinner,0,999,0);
        createSpinner(patrolsSpinner,0,999,0);
        createSpinner(trafficStopsSpinner,0,999,0);

        //Check for previous Login
        boolean configExists = ConfigReader.doesConfigExist();
        if (configExists) {
            isLoggedIn=true;
            //already was a config
            shiftInfoPane.setVisible(true);
            shiftInfoPane.setDisable(false);

            notesPane.setVisible(false);
            notesPane.setDisable(true);

            codesPane.setVisible(false);
            codesPane.setDisable(true);
            defaultPane.setDisable(true);
            defaultPane.setVisible(false);

            String name = ConfigReader.configRead("Name");
            String division = ConfigReader.configRead("Division");
            String rank = ConfigReader.configRead("Rank");
            String number = ConfigReader.configRead("Number");
            String agency = ConfigReader.configRead("Agency");

            OfficerInfoName.setText(name);
            OfficerInfoDivision.setText(division);
            OfficerInfoRank.setText(rank);
            OfficerInfoAgency.setText(agency);
            OfficerInfoNumber.setText(number);

            //Top Generations
            generatedByTag.setText("Generated By: "+rank+" "+ name);
            String date = DataTerminalHomeApplication.getDate();
            generatedOnTag.setText("Generated On: "+ date);

            System.out.println("Shift Info should be showing since there already was a config");

        } else {
            //blank config
            //disable buttons??
            isLoggedIn=false;
            defaultPane.setVisible(true);
            defaultPane.setDisable(false);

            codesPane.setVisible(false);
            codesPane.setDisable(true);
            notesPane.setDisable(true);
            notesPane.setVisible(false);
            shiftInfoPane.setDisable(true);
            shiftInfoPane.setVisible(false);

            System.out.println("login should be showing since there was no config");
        }


    }
}
